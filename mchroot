#!/usr/bin/python3

import argparse
import glob
import os
import subprocess
import sys

from dpkg import env
from dpkg import process
from dpkg import dist_config
from dpkg.env import ARCHITECTURES
from dpkg.argparse_helpers import build_parser

parser = argparse.ArgumentParser(
    description='Execute command in multiple chroots via schroot.')

group = parser.add_argument_group('chroots', 'Chroots to execute for.')
group.add_argument(
    '--skip-arch', '--sa', metavar='ARCH', action='append', choices=['i386', 'amd64'], default=[],
    help="Skip given architecture. May be given multiple times.")
group.add_argument(
    '--skip-dist', '--sd', metavar='DIST', action='append', default=[],
    help="Skip given distribution. May be given multiple times.")
group.add_argument(
    '--from-dist', '--fd', metavar='DIST',
    help="Only build on distributions equal or newer then DIST.")
group.add_argument(
    '--until-dist', '--ud', metavar='DIST',
    help="Only build in distributions equal or older then DIST.")
group.add_argument(
    '--dist', '-d', metavar='DIST',
    help='Only build on the specified distribution. (Overrides --fd and --ud)')
group.add_argument('--arch', '-a', metavar='ARCH',
                   help="Only use specified architecture. Overrides --sa.")


subparsers = parser.add_subparsers(
    dest='cmd', help="subcommands",
    description='A subcommand describes an action for the specified chroots.')
build = subparsers.add_parser(
    'build', aliases=['b'], parents=[build_parser],
    help="Build the package using git-build.py.",
    description="Build the package using git-build.py. Any parameters are passed to git-build.py")
login = subparsers.add_parser(
    'login', aliases=['l'], help="Sequentially open a shell in every chroot.")
login.add_argument('--save', default=False, action='store_true')
login.add_argument('--bindmounts', help="Bind given command into the chroot.")
update = subparsers.add_parser(
    'update', aliases=['u'], help="Update chroots.")
execute = subparsers.add_parser(
    'execute', aliases=['exec', 'e'],
    help="Execute a command in every chroot - unfortunately not yet implemented.")
execute.add_argument('script', help="The script to execute.")
execute.add_argument('--bindmounts', '--bind', '-b', help="Bind given path into the chroot.")
execute.add_argument('--save', '-s', default=False, action='store_true',
                     help="Update chroot after execution.")
upload = subparsers.add_parser('upload', help="Upload previously built package.")
stage = subparsers.add_parser('stage', help="Upload previously built package to staging-repo.")
subparsers.add_parser('list', help="List distributions that I would execute for.")
args = parser.parse_args()

failed = []

# honour --from-dist/--until-dist from command-line
if args.dist:  # explicit dist from CLI
    dists = [args.dist]
else:
    dists = dist_config.load_distributions(skip=args.skip_dist, start=args.from_dist,
                                           until=args.until_dist)

if args.cmd == 'list':
    for dist in dists:
        print(dist)
    sys.exit()

# honour archs:
if args.arch:
    archs = [args.arch, ]
else:
    archs = [a for a in ARCHITECTURES if a not in args.skip_arch]

if args.cmd in ['build', 'upload', ] and not os.path.exists(os.path.join('debian', 'changelog')):
    print('Error: Not a debian package.')
    sys.exit(1)

# finally, loop over dists:
for dist in dists:
    if args.cmd in ['build', 'upload', 'stage', ] and not env.would_build(dist, dists):
        print('Not building on %s.' % dist)
        continue

    for arch in archs:
        if os.path.exists('/var/cache/pbuilder/base-%s-%s.cow' % (dist, arch)):
            config = dist_config.get_config(dist)
            vendor = config.get('DEFAULT', 'vendor')

            os.environ['VENDOR'] = vendor
            os.environ['DIST'] = dist
            os.environ['ARCH'] = arch

            if args.cmd == 'update':
                cmd = ['git-pbuilder', 'update', ]
            elif args.cmd == 'login':
                cmd = ['git-pbuilder', 'login', ]
                if args.save:
                    cmd.append('--save-after-login')
                if args.bindmounts:
                    cmd += ['--bindmounts', args.bindmounts]
            elif args.cmd == 'build':
                cmd = ['git-build.py', '--dist=%s' % dist, '--arch=%s' % arch]
                if args.upload:
                    cmd.append('--upload')
                if args.stage:
                    cmd.append('--stage')
                if args.sa:
                    cmd.append('-s')
                if not args.pristine:
                    cmd.append('--no-pristine')

                    if args.upstream_tree:  # tree only has effect when not using pristine-tar
                        cmd.append('--upstream-tree=%s' % args.upstream_tree)
                        if args.upstream_branch:
                            cmd.append('--upstream-branch=%s' % args.upstream_branch)
            elif args.cmd == 'execute':
                basepath = '/var/cache/pbuilder/base-%s-%s.cow' % (dist, arch)
                configfile = os.path.expanduser('~/.pbuilderrc')
                cmd = ['sudo', 'cowbuilder', '--execute', args.script, '--dist', dist,
                       '--architecture', arch, '--basepath', basepath, '--configfile', configfile]
                if args.bindmounts:
                    cmd += ['--bindmounts', args.bindmounts]
                if args.save:
                    cmd.append('--save-after-login')
            elif args.cmd == 'upload':
                changes_file = process.get_changes_file(dist, arch)
                if os.path.exists(changes_file):
                    cmd = ['dput', '-f', '%s-%s' % (dist, arch), changes_file]
                else:
                    print('Warning: No changes file in %s-%s found.' % (dist, arch))
                    continue
            elif args.cmd == 'stage':
                changes_file = process.get_changes_file(dist, arch)
                if os.path.exists(changes_file):
                    cmd = ['dput', '-f', '%s-%s-stage' % (dist, arch), changes_file]
                else:
                    print('Warning: No changes file in %s-%s found.' % (dist, arch))
                    continue
            else:
                print("Error: Unknown command: %s" % args.cmd)
                continue
        else:
            print('Error: %s-%s: cow not found' % (dist, arch))
            failed.append('%s-%s' % (dist, arch))
            continue

        print('\n\n### DIST=%s ARCH=%s VENDOR=%s %s\n' % (dist, arch, vendor, ' '.join(cmd)))
        ret = subprocess.call(cmd)
        if ret > 0:
            failed.append('%s-%s' % (dist, arch))

if failed:
    print("\n\nThe command failed on the following distributions:\n\t%s" % ', '.join(failed))
