#!/usr/bin/python3

import argparse
import configparser
import os
import subprocess
import sys

from dpkg.env import DISTROS
from dpkg.env import ARCHITECTURES

parser = argparse.ArgumentParser(
    description='Execute command in multiple chroots via schroot.')
parser.add_argument('--chroot-dir', metavar='DIR', default='/chroot',
    help="Root directory that contains the chroots. (Default: %(default)s)")

group = parser.add_argument_group('chroots', 'Chroots to execute for.')
group.add_argument('--skip-arch', '--sa', metavar='ARCH', action='append',
    choices=['i386', 'amd64'], default=[],
    help="Skip given architecture. May be given multiple times.")
group.add_argument('--skip-dist', '--sd', metavar='DIST', action='append',
    default=[], help="Skip given distribution. May be given multiple times.")
group.add_argument('--from-dist', '--fd', metavar='DIST',
    help="Only build on distributions equal or newer then DIST.")
group.add_argument('--until-dist', '--ud', metavar='DIST',
    help="Only build in distributions equal or older then DIST.")
group.add_argument(
    '--dist', '-d', metavar='DIST',
    help='Only build on the specified distribution. (Overrides --sa, --fd and --ud)')
parser.add_argument('args', nargs=argparse.REMAINDER)
args = parser.parse_args()

failed = []
cwd = os.getcwd()
configpath = '/etc/dist-config'
userpath = os.path.expanduser('~/.dist-config')

# change to directory
if not os.path.exists(args.chroot_dir):
    print("Error: %s: No such file or directory." % args.chroot_dir,
        file=sys.stderr)
    sys.exit(1)

# filter dists that have .skip in root directory:
dists = set()
if os.path.exists(configpath):
    dists |= set([os.path.splitext(p)[0] for p in os.listdir(configpath)])
if os.path.exists(userpath):
    dists |= set([os.path.splitext(p)[0] for p in os.listdir(userpath)])

# skip distributions named at the command-line:
dists = sorted([d for d in dists if d not in args.skip_dist])

# honour --from-dist/--until-dist from command-line
if args.dist:  # explicit dist from CLI
    dists = [d for d in dists if d == args.dist]
else:
    if args.from_dist:
        index = DISTROS.index(args.from_dist)
        dists = [d for d in dists if d in DISTROS and DISTROS.index(d) >= index]
    if args.until_dist:
        index = DISTROS.index(args.until_dist)
        dists = [d for d in dists if d in DISTROS and DISTROS.index(d) <= index]

# honour skip = true in .cfg file
for dist in list(dists):
    config = configparser.ConfigParser({'skip': 'false'})
    config.read([os.path.join(userpath, '%s.cfg' % dist),
                os.path.join(configpath, '%s.cfg' % dist)])
    if config.getboolean('DEFAULT', 'skip'):
        dists.remove(dist)

# honour archs:
archs = [a for a in ARCHITECTURES if a not in args.skip_arch]

# finally, loop over dists:
for dist in dists:
    for arch in archs:
        if os.path.exists('/var/cache/pbuilder/base-%s-%s.cow' % (dist, arch)):
            cmd = ['git-build.py', '--dist=%s' % dist, '--arch=%s' % arch] + args.args
        else:
            cmd = ['schroot', '-p', '-c', '%s-%s' % (dist, arch), '-d', cwd, '--', ]
            cmd += args.args

        print('\n\n### %s\n' % ' '.join(cmd))
        ret = subprocess.call(cmd)
        if ret > 0:
            failed.append('%s-%s' % (dist, arch))

if failed:
    print("\n\nThe command failed on the following distributions:\n\t%s" % ', '.join(failed))
