#!/usr/bin/python3

import os, sys, argparse, sqlite3

parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument( '--db',
    default=os.path.expanduser( '~/.override.sqlite3' )
)

grp = parser.add_mutually_exclusive_group()
grp.add_argument( '--add', nargs=3, metavar=('PKG', 'PRIORITY', 'COMPONENT') ) # package, priority, component
grp.add_argument( '--list', action='store_true', default=False )
grp.add_argument( '--rm', metavar='PKG' ) #package

parser.add_argument( 'component', nargs='?', default='.' ) #optional!
args = parser.parse_args()

db_created = False
if not os.path.exists( args.db ):
    db_created = True
    
conn = sqlite3.connect( args.db )
cursor = conn.cursor()

if db_created:
    cursor.execute( '''CREATE TABLE packages (package TEXT UNIQUE, priority TEXT, component TEXT)''' )
    conn.commit()

if args.add:
    cursor.execute( '''INSERT INTO packages VALUES (?, ?, ?)''', args.add )
    conn.commit()
elif args.list:
    cursor.execute( '''SELECT * FROM packages''' )
    for row in cursor:
        print( '%s %s %s'%row )
    conn.commit()
elif args.rm:
    cursor.execute( '''DELETE FROM packages WHERE package=?''', args.rm )
    conn.commit()
else:
    if not os.path.exists( args.component ):
        print( 'Error: %s: Does not exist.'%args.component, file=sys.stderr )
        sys.exit(1)
    if not os.path.isdir( args.component ):
        print( 'Error: %s: Not a directory.'%args.component, file=sys.stderr )
        sys.exit(1)
        
    # generate dictionary of SQL data for fast lookup:
    pkg_data = {}
    cursor.execute( '''SELECT * FROM packages''' )
    for row in cursor:
        pkg_data[row[0]] = (row[1], row[2])
    
    file = open( '%s/override'%args.component, 'w' )
    
    files = os.listdir( args.component + '/all' )
    packages = sorted(set([f.split('_')[0] for f in files if f.endswith( '.deb' )]))
    for package in packages:
        if package in pkg_data:
            data = pkg_data[package]
            file.write( '%s %s %s\n'%(package, data[0], data[1]) )
        else:
            continue
    
    file.close()
    
cursor.close()
conn.close()