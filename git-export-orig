#!/usr/bin/env python3

import argparse
import os
import sys

from subprocess import Popen, PIPE

from dpkg import env
from dpkg import gbp

parser = argparse.ArgumentParser(
    description='Generate orig.tar.gz from upstream source tree')
parser.add_argument(
    '-v', metavar='VERSION', dest='version',
    help="Use this version (default: get from debian/control)"
)
args = parser.parse_args()

# basically: dh_testdir
if not os.path.exists('debian/control'):
    print('debian/control: No such file or directory.', file=sys.stderr)
    sys.exit(1)

pkg = env.get_source_package()
if args.version is None:
    version = env.get_source_version()
else:
    version = args.version
upstream_branch = gbp.upstream_branch()
tag_format = gbp.upstream_tag()
compression = gbp.compression()

if compression == 'gzip':
    filename = '../%s_%s.orig.tar.gz' % (pkg, version)
    compression_cmd = ['gzip']
elif compression == 'xz':
    filename = '../%s_%s.orig.tar.xz' % (pkg, version)
    compression_cmd = ['xz']
else:
    raise RuntimeError("Unsupported compression format")
prefix = '%s-%s/' % (pkg, version)
tag = tag_format % {'version': version}

# check if tag already exists:
p_taglist = Popen(['git', 'tag'], stdout=PIPE)
tags = p_taglist.communicate()[0].decode('utf-8').strip().split()

# tag the upstream branch:
if tag not in tags:
    print('git tag %s %s' % (tag, upstream_branch))
    tag_cmd = ['git', 'tag', tag, upstream_branch]
    p_tag = Popen(tag_cmd, stderr=PIPE)
    stdout, stderr = p_tag.communicate()
    if p_tag.returncode != 0:
        print(stderr.decode('utf-8').strip(), file=sys.stderr)
        sys.exit(1)
else:
    print("Tag '%s' already exists." % tag)

f = open(filename, 'w')

archive_cmd = ['git', 'archive', '--prefix=%s' % prefix, tag]
print('%s | %s > %s' % (' '.join(archive_cmd), ' '.join(compression_cmd), filename))
p1 = Popen(archive_cmd, stdout=PIPE, stderr=PIPE)
p2 = Popen(compression_cmd, stdin=p1.stdout, stdout=f)
p1.wait()
p1.stdout.close()
p2_stderr = p2.communicate()[1]

if p1.returncode != 0:
    print(p1.stderr.read().decode('utf-8').strip(), file=sys.stderr)
    sys.exit(1)
if p2.returncode != 0:
    print(p2_stderr.decode('utf-8').strip(), file=sys.stderr)
    sys.exit(1)

print("pristine-tar commit %s %s" % (filename, tag))
p_pristine = Popen(['pristine-tar', 'commit', filename, tag], stderr=PIPE)
pristine_stderr = p_pristine.communicate()[1]
if p_pristine.returncode != 0:
    print(pristine_stderr.decode('utf-8').strip(), file=sys.stderr)
